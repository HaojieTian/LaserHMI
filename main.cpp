#include "ui/zmainui.h"
#include <QApplication>
#include <QFontDatabase>
#include <QFont>
#include <QFile>
#include "db/zsqlitedb.h"
#include <QDebug>
#include "gbl/hmi_const.h"
#include "ui/zloadui.h"
#include <QElapsedTimer>
#include "ringbuffer/zringbuffer.h"
#include "ci/zlitronicsci.h"
#include "ci/crc16.h"
#include "ui/zcurveui.h"
#include <QCommandLineOption>
#include <QCommandLineParser>
#include "ui/zfullkbd.h"
#include <dump/zdbgserver.h>
#include <QDebug>
#include "ui/zlaserrunhoursui.h"
int main(int argc, char *argv[])
{
    //used to generate .core file.
//    FILE *fp=popen("ulimit -c unlimited","r");
//    pclose(fp);

    QApplication app(argc, argv);

#if 1
    QFile skinFile1(":/skin/skin/defaultSkin");
    if(skinFile1.open(QIODevice::ReadOnly))
    {
        app.setStyleSheet(skinFile1.readAll());
        skinFile1.close();
    }
#endif

    //used to test if the application is runnable or not.
    //used for upgrade functions.
    QCommandLineOption runTestOpt("n","the value will be written to /tmp/.hmi.zsy");
    runTestOpt.setValueName("number");
    QCommandLineParser cmdParser;
    cmdParser.addOption(runTestOpt);
    cmdParser.process(app);
    if(cmdParser.isSet(runTestOpt))
    {
        qDebug()<<cmdParser.value(runTestOpt);
#ifdef Q_OS_WIN
        QFile testFile("c:\\.hmi.zsy");
#endif
#ifdef Q_OS_LINUX
        QFile testFile("/tmp/.hmi.zsy");
#endif
        if(testFile.open(QIODevice::WriteOnly))
        {
            //QByteArray hmiData("#This file is generated by HMIManager automatically.\r\n"
            //                   "#DO NOT EDIT BY MANUAL!\r\n"
            //                   "#It's only used to check if the application is runnable or not.\r\n");
            //testFile.write(hmiData);
            testFile.write(cmdParser.value(runTestOpt).toUtf8());
            testFile.flush();
            testFile.close();
            return 0;
        }else{
            //qDebug()<<cmdParser.helpText();
            return -1;
        }
    }

#if 0
    foreach (const QSerialPortInfo &info, QSerialPortInfo::availablePorts()) {
        qDebug() << "Name        : " << info.portName();
        qDebug() << "Description : " << info.description();
        qDebug() << "Manufacturer: " << info.manufacturer();
    }
#endif

    //initial global help parameters.
    g_GblHelp.m_bEnSelfCheck=true;
    g_GblHelp.m_bEnHeartBeat=true;
    g_GblHelp.m_bEnCRC16=true;
    g_GblHelp.m_bEnEncrypt=false;
    g_GblHelp.m_bEnPopupErrMsg=true;
    g_GblHelp.m_bOpTips=true;
    g_GblHelp.m_bQueryStatus=true;
    g_GblHelp.m_bBeep=true;
    g_GblHelp.m_nHeartBeatInterval=5;
    g_GblHelp.m_nTimeoutVal=3;
    g_GblHelp.m_nQueryInterval=1;
    //offline timeout is 10s at default.
    g_GblHelp.m_nOfflineTimeout=10;

    //two chiller data.
    g_GblHelp.m_chillerPwr=0;
    g_GblHelp.m_projectPwrOn=0;

    //16 laser state for heartbeat packet.
    g_GblHelp.m_laserFault=0;
    g_GblHelp.m_logFault=0;
    g_GblHelp.m_glaserPwrFault=0;
    g_GblHelp.m_chillerFault=0;
    g_GblHelp.m_CommunicateErrFlag=0;
    //global error indicator.
    g_GblHelp.m_bGblErr=false;

    //login success or not.
    g_GblHelp.m_bLoginSuccess=false;

    //create dump debug msg server.
    ZDbgServer dbgServer;
    if(dbgServer.startServer()<0)
    {
        qDebug()<<"failed to start dump dbg server!";
        return -1;
    }

    ZLoadUI *loadUI=new ZLoadUI;
    loadUI->setFixedSize(SCREEN_WIDTH,SCREEN_HEIGHT);
    loadUI->show();
    //loadUI->showFullScreen();
    loadUI->ZSetMsg("Checking database...");
    app.processEvents();
    //qDebug()<<QSqlDatabase::drivers();
    gDB.ZDoInit();
    if(gDB.ZOpenDB("LaserHMI.db",true)<0)
    {
        loadUI->ZSetMsg("Database check failed!");
        app.processEvents();
        PauseMs(5000);
        return -1;
    }

    //check OpLogTable.
    loadUI->ZSetProgress(10);
    loadUI->ZSetMsg("Checking OpLogTable...");
    app.processEvents();
    if(gDB.ZIsTableExist("OpLogTable")<0)
    {
        loadUI->ZSetMsg("Creating OpLoadTable...");
        gDB.ZCreateOPLogTable();
    }

    //check ColorTempTable.
    loadUI->ZSetProgress(12);
    loadUI->ZSetMsg("Checking ColorTempTable...");
    app.processEvents();
    if(gDB.ZIsTableExist("ColorTempTable")<0)
    {
        loadUI->ZSetMsg("Creating ColorTempTable...");
        gDB.ZCreateColorTempTable();
    }

    //check ConfigTable.
    loadUI->ZSetProgress(15);
    loadUI->ZSetMsg("Checking ConfigTable...");
    app.processEvents();
    if(gDB.ZIsTableExist("ConfigTable")<0)
    {
        gDB.ZCreateConfigTable();
    }
    QStringList cfgList;
    if(!gDB.ZGetConfigData(cfgList))
    {
        //g_GblHelp.m_cinemaName=cfgList.at(0);
        g_GblHelp.m_cinemaName=QString("辰星科技 White Laser®   ");
        g_GblHelp.m_devNo=cfgList.at(1);
        g_GblHelp.m_password=cfgList.at(2);
    }
    //check IME.pinyin database.
    loadUI->ZSetProgress(20);
    loadUI->ZSetMsg("Checking IME Components...");
    app.processEvents();
#if 0
    QObject::connect(&gDB,SIGNAL(ZSigIMEMsg(QString)),loadUI,SLOT(ZSloShowMsg(QString)));
    if(gDB.ZIsTableExist("PinYinTable")<0)
    {
        loadUI->ZSetMsg("Initializing Pinyin IME database...");
        gDB.ZCreatePinYinTable();
    }
    QObject::disconnect(&gDB,SIGNAL(ZSigIMEMsg(QString)),loadUI,SLOT(ZSloShowMsg(QString)));
#endif
//    for(qint32 i=0;i<10;i++)
//    {
//        gDB.ZAddOPLogRecord("2017-05-05 00:08:08",1,"HMI start up.");
//    }
//    qDebug()<<"rowCount:"<<gDB.ZGetRecordCount("OpLogTable");

    //load fonts.
    loadUI->ZSetProgress(40);
    loadUI->ZSetMsg("Loading Fonts...");
    app.processEvents();
    int nIndex=QFontDatabase::addApplicationFont("/HMI/fonts/msyh.ttf");
    if(nIndex!=-1)
    {
        QStringList fontList=QFontDatabase::applicationFontFamilies(nIndex);
        if(fontList.size()>0)
        {
            QFont font(fontList.at(0),10);
            app.setFont(font);
            qDebug()<<"load msyh.ttf successfully!";
        }
    }

    //load skin.
    loadUI->ZSetProgress(60);
    loadUI->ZSetMsg("Loading Skin...");
    app.processEvents();
//    QFile skinFile(":/skin/skin/defaultSkin");
//    if(skinFile.open(QIODevice::ReadOnly))
//    {
//        app.setStyleSheet(skinFile.readAll());
//        skinFile.close();
//    }
    //create Tx&Rx RingBuffer.
    loadUI->ZSetProgress(70);
    loadUI->ZSetMsg("Creating TxRingBuffer...");
    ZRingBuffer *txRingBuffer=new ZRingBuffer;
    txRingBuffer->ZDOInit(10);
    loadUI->ZSetProgress(80);
    loadUI->ZSetMsg("Creating RxRingBuffer...");
    ZRingBuffer *rxRingBuffer=new ZRingBuffer;
    rxRingBuffer->ZDOInit(10);
    //create Litronics CI.
    loadUI->ZSetMsg("Creating Litronics CI...");
    ZLitronicsCI *ci=new ZLitronicsCI(txRingBuffer,rxRingBuffer);
    ci->start();
    loadUI->ZSetProgress(90);
    loadUI->ZSetMsg("Creating Main Window....");
    app.processEvents();
    ZMainUI mainUI(txRingBuffer,rxRingBuffer);
    mainUI.ZDoInitial();

    QObject::connect(&mainUI,SIGNAL(ZSigLoadMsg(QString)),loadUI,SLOT(ZSloShowMsg(QString)));
    QObject::connect(ci,SIGNAL(ZSigErrMsg(QString)),&mainUI,SLOT(ZSloShowPopupMsg(QString)));
    QObject::connect(ci,SIGNAL(ZSigTxRxDone(qint32)),&mainUI,SIGNAL(ZSigTxRxDone(qint32)));
    QObject::connect(ci,SIGNAL(ZSigDecodeDone(qint32)),&mainUI,SIGNAL(ZSigDecodeDone(qint32)));
    QObject::connect(ci,SIGNAL(ZSigDevLinkDone(qint32)),&mainUI,SIGNAL(ZSigDevLinkDone(qint32)));
    QObject::connect(&mainUI,SIGNAL(ZSigDumpDbgMsg(QString)),&dbgServer,SIGNAL(ZSigDumpDbgMsg(QString)));
    QObject::connect(ci,SIGNAL(ZSigDumpDbgMsg(QString)),&dbgServer,SIGNAL(ZSigDumpDbgMsg(QString)));
    loadUI->ZSetProgress(100);
    loadUI->ZSetMsg("Loading Finish!");
    mainUI.setFixedSize(SCREEN_WIDTH,SCREEN_HEIGHT);
    mainUI.show();
    //mainUI.showFullScreen();
    loadUI->close();
    delete loadUI;
    return app.exec();
}
